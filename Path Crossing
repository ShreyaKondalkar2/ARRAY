//Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

//Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.
class Solution {
    public boolean isPathCrossing(String path) {
        int n=path.length();
        boolean res=false;
        int [][] arr=new int[n+1][n+1];
        int x=0,y=0;
        arr[0][0]=x;
        arr[0][1]=y;
        for(int i=0;i<n;i++)
        {
            char c=path.charAt(i);
            switch(c)
            {
                case 'N':
                    y++;
                    arr[i+1][0]=x;
                    arr[i+1][1]=y;
                    break;
                case 'S':
                    y--;
                    arr[i+1][0]=x;
                    arr[i+1][1]=y;
                     break;
                case 'E':
                    x++;
                    arr[i+1][0]=x;
                    arr[i+1][1]=y;
                     break;
                case 'W':
                    x--;
                    arr[i+1][0]=x;
                    arr[i+1][1]=y;
                     break;
                default:
                    System.out.println("Enter valid direction");

            }
        }
        for(int i=0;i<n+1;i++)
        {
            for(int j=i+1;j<n+1;j++)
            {
                if(arr[i][0]==arr[j][0] && arr[i][1]==arr[j][1])
                {
                    res=true;
                    break;
                }
            }
        }
        return res;
    }
}
